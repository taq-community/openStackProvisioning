#cloud-config
package_update: true
packages:
  - docker.io
  - jq
  - default-jre     # ShinyProxy requires Java (Debian/Ubuntu package pulls this in, but this keeps it explicit)
  - ufw
  - nginx

users:
  - name: sviss
    groups: [docker, sudo]
    shell: /bin/bash
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHRbsFCqTfi53WzSID/lm1SydwZ1fIFsS7cZh0gpZ6Dp steve.vissault@inrs.ca

write_files:
  - path: /etc/nginx/sites-available/shinyproxy
    permissions: "0644"
    content: |
      map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
      }

      server {
        listen 80;
        server_name cloud.taq.info;

        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;

        location / {
          proxy_pass         http://127.0.0.1:8080/;
          proxy_http_version 1.1;

          proxy_set_header   Upgrade $http_upgrade;
          proxy_set_header   Connection $connection_upgrade;

          proxy_set_header   Host $host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto $scheme;
        }
      }

  # Main ShinyProxy config (installed .deb reads /etc/shinyproxy/application.yml)
  - path: /etc/shinyproxy/application_deploy.yml
    permissions: "0644"
    owner: root:root
    content: |
      proxy:
        title: Control app center
        logo-url: https://www.openanalytics.eu/shinyproxy/logo.png
        landing-page: /
        heartbeat-rate: 10000
        heartbeat-timeout: 60000
        port: 8080
        authentication: simple
        admin-groups: admin
        hide-navbar: true
        container-log-path: /var/log/shinyproxy/container-logs
        # Example: 'simple' authentication configuration
        users:
          - name: tuan
            password: 2bchanged
            groups: scientists
          - name: julie
            password: 2bchanged
            groups: scientists
          - name: steve
            password: 2bchanged
            groups: [ scientists, admin ]
        docker:
          port-range-start: 20000
        specs:
          - id: barque
            display-name: BARQUE
            description: A Shiny application to run the BARQUE workflow.
            container-image: barque-app:prod
            access-groups: scientists 
      logging:
        file:
          name: /var/log/shinyproxy/shinyproxy.log

logging:
  file:
    name: /var/log/shinyproxy/shinyproxy.log

runcmd:
  # Ensure Docker is enabled and running
  - systemctl enable --now docker

  # Download & install the ShinyProxy .deb (3.2.0 here; adjust as needed)
  - wget -O /tmp/shinyproxy_3.2.0_amd64.deb https://www.shinyproxy.io/downloads/shinyproxy_3.2.0_amd64.deb
  - apt-get install -y /tmp/shinyproxy_3.2.0_amd64.deb
  - rm -rf /etc/shinyproxy/application.yml
  - mv /etc/shinyproxy/application_deploy.yml /etc/shinyproxy/application.yml 

  # Create ShinyProxy log directory
  - mkdir -p /var/log/shinyproxy/container-logs
  - chown -R shinyproxy:shinyproxy /var/log/shinyproxy
  - chmod -R 0755 /var/log/shinyproxy

  # Restart ShinyProxy so it picks up group membership and config
  - systemctl restart shinyproxy
  
  # Clone, build, push barqueShinyAp on local repo
  - mkdir /docker-build
  - git clone --recurse-submodules https://github.com/taq-community/barqueShinyApp.git /docker-build/barqueShinyApp
  - cd /docker-build/barqueShinyApp && docker build . -t barque-app:prod && cd

  # Load nginx conf
  - ln -sf /etc/nginx/sites-available/shinyproxy /etc/nginx/sites-enabled/shinyproxy
  - rm -f /etc/nginx/sites-enabled/default
  - nginx -t && systemctl reload nginx
  - systemctl restart shinyproxy
